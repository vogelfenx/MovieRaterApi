{"version":3,"sources":["components/movie-list.jsx","components/movie-details.jsx","components/movie-form.jsx","App.js","serviceWorker.js","components/login.jsx","index.js"],"names":["FontAwesome","require","MovieList","props","movieClicked","movie","evt","editClicked","removeClicked","fetch","process","id","method","headers","token","then","resp","movieDeleted","catch","error","console","log","movies","map","className","key","onClick","title","name","addMovie","MovieDetails","state","highlighted","highlightRate","high","setState","rateClicked","stars","body","JSON","stringify","json","res","getDetails","updateMovie","mov","this","Fragment","avg_rating","no_of_ratings","description","Array","e","i","onMouseEnter","onMouseLeave","Component","MovieForm","editedMovie","cancelMovieForm","inputChanged","event","target","value","saveMovie","newMovie","isDisabled","length","type","onChange","disabled","App","selectedMovie","cookies","get","loadMovie","selMovie","filter","window","location","href","withCookies","Boolean","hostname","match","Login","credentials","username","password","isLoginView","loginUser","alert","toggleView","routing","CookiesProvider","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1c5db09f.chunk.js","sourcesContent":["import React from 'react';\r\nvar FontAwesome = require('react-fontawesome');\r\n\r\nfunction MovieList(props) {\r\n\r\n    const movieClicked = movie => evt => {\r\n        props.movieClicked(movie);\r\n    }\r\n\r\n    const editClicked = movie => evt => {\r\n        props.editClicked(movie);\r\n    }\r\n\r\n    const addMovie = () => evt => {\r\n        props.addMovie();\r\n    }\r\n\r\n    const removeClicked = movie => evt => {\r\n\r\n        // props.movieDeleted(movie) //use it for DEBUG and comment out the fetch\r\n\r\n        fetch(`${process.env.REACT_APP_MOVIE_API_URL}/api/movies/${movie.id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Authorization': `Token ${props.token}`,\r\n            }\r\n          }).then( resp => props.movieDeleted(movie))\r\n          .catch( error => console.log(error))\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            { props.movies.map( movie => {\r\n                return (\r\n                    <div className=\"movieList\" key={movie.id}>\r\n                        <h2 onClick={movieClicked(movie)}>\r\n                            {movie.title}\r\n                        </h2>\r\n                        <div className=\"movieList__edit-update\">\r\n                            <FontAwesome name=\"edit\" className=\"movieList__update\" onClick={editClicked(movie)} />\r\n                            <FontAwesome name=\"trash\" className=\"movieList__trash\" onClick={removeClicked(movie)} />\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })}\r\n            Add new movie <FontAwesome name=\"plus-square\" className=\"movieList__add\" onClick={addMovie()} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MovieList;","import React, { Component } from 'react';\r\nvar FontAwesome = require('react-fontawesome')\r\n\r\n\r\nclass MovieDetails extends Component {\r\n\r\n    state = {\r\n        highlighted: -1\r\n    }\r\n\r\n    highlightRate = high => evt => {\r\n        this.setState({highlighted: high});\r\n    }\r\n\r\n    rateClicked = stars => evt => {\r\n        fetch(`${process.env.REACT_APP_MOVIE_API_URL}/api/movies/${this.props.movie.id}/rate_movie/`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Token ${this.props.token}`,\r\n            },\r\n            body: JSON.stringify({stars: stars + 1})\r\n        }).then( resp => resp.json())\r\n        .then( res => this.getDetails())\r\n        .catch( error => console.log(error))\r\n    }\r\n\r\n    getDetails = () => {\r\n        fetch(`${process.env.REACT_APP_MOVIE_API_URL}/api/movies/${this.props.movie.id}/`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Token ${this.props.token}`,\r\n            }\r\n        }).then( resp => resp.json())\r\n        .then( res => this.props.updateMovie(res))\r\n        .catch( error => console.log(error))\r\n    }\r\n\r\n    render() {\r\n        const mov = this.props.movie\r\n    \r\n        return (\r\n            <React.Fragment>\r\n                { mov ? (\r\n                        <div>\r\n                            <h3>{mov.title}</h3>\r\n                            <FontAwesome name=\"star\" className={mov.avg_rating > 0 ? 'orange': ''}/>\r\n                            <FontAwesome name=\"star\" className={mov.avg_rating > 1 ? 'orange': ''}/>\r\n                            <FontAwesome name=\"star\" className={mov.avg_rating > 2 ? 'orange': ''}/>\r\n                            <FontAwesome name=\"star\" className={mov.avg_rating > 3 ? 'orange': ''}/>\r\n                            <FontAwesome name=\"star\" className={mov.avg_rating > 4 ? 'orange': ''}/>\r\n                            ({mov.no_of_ratings})\r\n                            <p>{mov.description}</p>\r\n                            <div className=\"rate-container\">\r\n\r\n                                <h2>Rate it !!!</h2>\r\n\r\n                                {[...Array(5)].map( (e, i) => {\r\n                                    return <FontAwesome key={i} name=\"star\" className={this.state.highlighted > i - 1 ? 'purple': ''} onMouseEnter={this.highlightRate(i)} onMouseLeave={this.highlightRate(-1)} onClick={this.rateClicked(i)}/>\r\n                                })}\r\n                            </div>   \r\n                        </div>\r\n                    ) : null\r\n                }\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default MovieDetails;","import React, { Component } from 'react';\r\nvar FontAwesome = require('react-fontawesome');\r\n\r\nclass MovieForm extends Component {\r\n\r\n  state = {\r\n    editedMovie: this.props.movie\r\n  }\r\n\r\n  cancelMovieForm = movie => evt => {\r\n      this.props.cancelMovieForm(movie);\r\n  }\r\n\r\n  inputChanged = event => {\r\n      // console.log(\"input changed\");\r\n    let movie = this.state.editedMovie\r\n    movie[event.target.name] = event.target.value\r\n    this.setState({editedMovie: movie})\r\n  }\r\n\r\n  saveMovie = () => event => {\r\n    fetch(`${process.env.REACT_APP_MOVIE_API_URL}/api/movies/`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Token ${this.props.token}`,\r\n        },\r\n        body: JSON.stringify(this.state.editedMovie)\r\n    }).then( resp => resp.json())\r\n    .then( res => this.props.newMovie(res))\r\n    .catch( error => console.log(error))\r\n  }\r\n\r\n  updateMovie = () => event => {\r\n    fetch(`${process.env.REACT_APP_MOVIE_API_URL}/api/movies/${this.state.editedMovie.id}/`, {\r\n      method: 'PUT',\r\n      headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Token ${this.props.token}`,\r\n      },\r\n      body: JSON.stringify(this.state.editedMovie)\r\n  }).then( resp => resp.json())\r\n  .then( res => this.props.editedMovie(res))\r\n  .catch( error => console.log(error))\r\n  }\r\n  \r\n  render() {\r\n    const isDisabled = this.state.editedMovie.title.length == 0 ||\r\n                       this.state.editedMovie.description.length == 0\r\n\r\n    return (\r\n      <React.Fragment>\r\n          <span>Title</span> <br/>\r\n          <input type=\"text\" name=\"title\" value={this.props.movie.title} onChange={this.inputChanged} /> <br/>\r\n          <span>Description</span> <br/>\r\n          <textarea name=\"description\" value={this.props.movie.description} onChange={this.inputChanged} /> <br/>\r\n          \r\n          <div className=\"movie-form__button-grp\">\r\n            {this.props.movie.id ? \r\n              <button onClick={this.updateMovie()}>update</button> :\r\n              <button disabled={isDisabled} onClick={this.saveMovie()}>save</button>}\r\n\r\n            <button onClick={this.cancelMovieForm(this.state.editedMovie)}>cancel</button>\r\n          </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default MovieForm;\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport MovieList from './components/movie-list'\r\nimport MovieDetails from './components/movie-details'\r\nimport MovieForm from './components/movie-form'\r\nimport { withCookies } from 'react-cookie';\r\nvar FontAwesome = require('react-fontawesome');\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    movies: [],\r\n    selectedMovie: null,\r\n    editedMovie: null,\r\n    token: this.props.cookies.get('mr-token'),\r\n  }\r\n\r\n  componentDidMount() {\r\n    if(this.state.token) {\r\n      fetch(`${process.env.REACT_APP_MOVIE_API_URL}/api/movies/`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': `Token ${this.state.token}`\r\n        }\r\n      }).then( resp => resp.json())\r\n      .then( res => this.setState({movies: res}))\r\n      .catch( error => console.log(error))\r\n    } else {\r\n      window.location.href = \"/\";\r\n    }\r\n    \r\n  }\r\n\r\n  loadMovie = movie => {\r\n    this.setState({selectedMovie: movie, editedMovie: null})\r\n  }\r\n\r\n  movieDeleted = selMovie => {\r\n    const movies = this.state.movies.filter( movie => movie.id !== selMovie.id)\r\n    this.setState({movies: movies, selectedMovie: null})\r\n  }\r\n\r\n  editClicked = selMovie => {\r\n    this.setState({editedMovie: selMovie})\r\n  }\r\n\r\n  addMovie = () => {\r\n    console.log(\"1 addMovie\");\r\n    this.setState({editedMovie: {title: '', description: ''}})\r\n  }\r\n\r\n  newMovie = movie => {\r\n    this.setState({movies: [...this.state.movies, movie]})\r\n  }\r\n\r\n  cancelMovieForm = movie => {\r\n    this.setState({editedMovie: null})\r\n    if (movie.title.length > 0) this.loadMovie(movie)\r\n  }\r\n\r\n  render() {\r\n    \r\n    return (\r\n      \r\n      <div className=\"App\">\r\n        <h1>\r\n          <FontAwesome name=\"film\"/>\r\n          <span>Movie Rater</span>\r\n        </h1>\r\n\r\n        <div className=\"layout\">\r\n          <MovieList movies={this.state.movies} movieClicked={this.loadMovie}\r\n          movieDeleted={this.movieDeleted} editClicked={this.editClicked} addMovie={this.addMovie} token={this.state.token} />\r\n          <div>\r\n            { !(this.state.editedMovie) ? (\r\n              <MovieDetails movie={this.state.selectedMovie} updateMovie={this.loadMovie} token={this.state.token}/>\r\n            ) : <MovieForm key={this.state.editedMovie.id} movie={this.state.editedMovie} newMovie={this.newMovie} cancelMovieForm={this.cancelMovieForm} editedMovie={this.loadMovie} token={this.state.token}/>}\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default withCookies(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { withCookies } from 'react-cookie';\r\n\r\n\r\nclass Login extends Component {\r\n\r\n    state = {\r\n        credentials: {\r\n            username: '',\r\n            password: ''\r\n        },\r\n        isLoginView: true,\r\n    }\r\n\r\n    inputChanged = event => {\r\n        let credentials = this.state.credentials\r\n        credentials[event.target.name] = event.target.value\r\n        this.setState({credentials: credentials})\r\n    }\r\n\r\n    loginUser = event => {\r\n        alert(\"DONE\");\r\n        // if (this.state.isLoginView) {\r\n        //     fetch(`${process.env.REACT_APP_MOVIE_API_URL}/auth/`, {\r\n        //         method: 'POST',\r\n        //         headers: { 'Content-Type': 'application/json' },\r\n        //         body: JSON.stringify(this.state.credentials)\r\n        //     }).then( resp => resp.json())\r\n        //     .then( res => {\r\n        //         this.props.cookies.set('mr-token', res.token)\r\n        //         if (res.token) { \r\n        //             window.location.href = \"/movies\" \r\n        //         }\r\n        //     })\r\n        //     .catch( error => console.log(error))     \r\n        // } else {\r\n        //     fetch(`${process.env.REACT_APP_MOVIE_API_URL}/api/users/`, {\r\n        //         method: 'POST',\r\n        //         headers: { 'Content-Type': 'application/json' },\r\n        //         body: JSON.stringify(this.state.credentials)\r\n        //     }).then( resp => resp.json())\r\n        //     .then( res => this.setState({isLoginView: true}) )\r\n        //     .catch( error => console.log(error))     \r\n        // }\r\n   \r\n    }\r\n\r\n    toggleView = () => {\r\n        this.setState({isLoginView: !this.state.isLoginView})\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"login-container\">\r\n                <h1>\r\n                    {this.state.isLoginView ? 'Login' : 'Register'}\r\n                </h1>\r\n                <span>Username</span> <br/>\r\n                <input type=\"text\" name=\"username\" value={this.state.username} onChange={this.inputChanged} /> <br/>\r\n                \r\n                <span>Password</span> <br/>\r\n                <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.inputChanged} /> <br/>\r\n            \r\n                <button onClick={this.loginUser}>Login</button>\r\n                <p onClick={this.toggleView}>\r\n                    {this.state.isLoginView ? 'Create Account' : 'Back to Login'}\r\n                </p>\r\n            </div>\r\n        );\r\n      }\r\n}\r\n\r\n\r\nexport default withCookies(Login);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Route, BrowserRouter, HashRouter } from 'react-router-dom'\r\nimport Login from './components/login';\r\nimport { CookiesProvider} from 'react-cookie';\r\n\r\nconst routing = (\r\n  <HashRouter> \r\n    <CookiesProvider>\r\n      <Route exact path=\"/\" component={Login}></Route>\r\n      <Route exact path=\"/movies\" component={App}></Route>\r\n    </CookiesProvider>\r\n  </HashRouter>\r\n)\r\n\r\nReactDOM.render(routing, document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}